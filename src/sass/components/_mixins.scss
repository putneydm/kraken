/* mixins */


/* makes a multicolumn responsive box */

@mixin column_width ($number_of_columns, $container_width, $gutter)
	{
	$gutter_calc: percentage($gutter / $container_width);
	$box_calc: percentage(($container_width / $number_of_columns) / $container_width);
	

	
	$gutter_subtract: $gutter_calc / $number_of_columns;
	
	width: ($box_calc + $gutter_subtract) - $gutter_calc;
	margin:$gutter_calc $gutter_calc 0 0;
	
	box-sizing:border-box;
	float:left;
	}
	
	
@mixin spanner ($number_of_columns, $container_width, $gutter, $span)
	{
	$gutter_calc: percentage($gutter / $container_width);
	$box_calc: percentage(($container_width / $number_of_columns) / $container_width);
	$gutter_subtract: $gutter_calc / $number_of_columns;
	
	width: (($box_calc + $gutter_subtract) - $gutter_calc) * $span;
	margin:0 $gutter_calc 0 0;	
	box-sizing:border-box;
	float:left;
	}	
	
/*	
@mixin spanner_too ($number_of_columns, $container_width, $gutter, $span)
	{
	$gutter_calc: percentage($gutter / $container_width);
	$box_calc: percentage(($container_width / $number_of_columns) / $container_width);
	

	
	$gutter_subtract: $gutter_calc / $number_of_columns;
	
	width: (($box_calc + $gutter_subtract) - $gutter_calc) * $span;
	margin-right: $gutter_calc;	
	box-sizing:border-box;
	}	
*/
		
@mixin spanner_too ($number_of_columns, $container_width, $gutter, $span)
	{
	$gutter_calc: percentage($gutter / $container_width);
	$box_calc: percentage(($container_width / $number_of_columns) / $container_width);

	$gutter_subtract: $gutter_calc / $number_of_columns;
	
	width: (($box_calc + $gutter_subtract) - $gutter_calc) * $span;
	margin-right: $gutter_calc;	
	float:left;
	
		&:last-child
		{
		margin-right:0px;		
		}
	
	}	
	
@mixin spanner_wide ($number_of_columns, $container_width, $gutter, $span)
	{
	$gutter_calc: percentage($gutter / $container_width);
	$box_calc: percentage(($container_width / $number_of_columns) / $container_width);

	$gutter_subtract: $gutter_calc / $number_of_columns;
	
	width: ($box_calc * $span) - $gutter_calc;
	margin-right: $gutter_calc;	
	float:left;
	}		
	
	
@mixin marginizer_left ($number_of_columns, $container_width, $gutter, $span)
	{
	$gutter_calc: percentage($gutter / $container_width);
	$box_calc: percentage(($container_width / $number_of_columns) / $container_width);	
	$gutter_subtract: $gutter_calc / $number_of_columns;
	
	margin-left: (($box_calc + $gutter_subtract) - $gutter_calc) * $span;
	}	

@mixin marginizer_right ($number_of_columns, $container_width, $gutter, $span)
	{
	$gutter_calc: percentage($gutter / $container_width);
	$box_calc: percentage(($container_width / $number_of_columns) / $container_width);	
	$gutter_subtract: $gutter_calc / $number_of_columns;
	
	margin-right: (($box_calc + $gutter_subtract) - $gutter_calc) * $span;
	}			
	

@mixin circle ($size)
	{
	width:$size;
	height:$size;
	border-radius:$size / 2;
    }
    
    
@mixin center ($top_margin,$bottom_margin)
	{  
	margin:$top_margin auto $bottom_margin;
	float:none;
	}
	
@mixin eminator ($size)
	{  
	font-size:$size
	}	
	
@mixin trans ($color)
	{
	background-color:rgba( $color, 0.2 )	
	}

	
	
@mixin hoverer ($link, $visit, $hover, $active)
	{
		color:$link;
		text-decoration:none;
		background-image: -moz-linear-gradient(top, transparent 75%, $link 75%);
		background-image: -webkit-linear-gradient(top, transparent 75%, $link 75%);
		background-image: -o-linear-gradient(top, transparent 75%, $link 75%);
		background-image: linear-gradient(to bottom, transparent 75%, $link 75%);
		background-size: 2px 2px;
		background-origin: padding-box;
		background-position: 0 95%;
		background-repeat: repeat-x;
	
	 &:visited {
      	color: $visit;
		background-image: -moz-linear-gradient(top, transparent 75%, $visit 75%);
		background-image: -webkit-linear-gradient(top, transparent 75%, $visit 75%);
		background-image: -o-linear-gradient(top, transparent 75%, $visit 75%);
		background-image: linear-gradient(to bottom, transparent 75%, $visit 75%);
		background-size: 2px 2px;
		background-origin: padding-box;
		background-position: 0 95%;
		background-repeat: repeat-x;
    }
   
    &:hover {
      	color: $hover; 
      	background-image: -moz-linear-gradient(top, transparent 75%, $hover 75%);
		background-image: -webkit-linear-gradient(top, transparent 75%, $hover 75%);
		background-image: -o-linear-gradient(top, transparent 75%, $hover 75%);
		background-image: linear-gradient(to bottom, transparent 75%, $hover 75%);
		background-size: 2px 2px;
		background-origin: padding-box;
		background-position: 0 95%;
		background-repeat: repeat-x;
      
        
    }
    &:active {
		color: $active;
		background-image: -moz-linear-gradient(top, transparent 75%, $active 75%);
		background-image: -webkit-linear-gradient(top, transparent 75%, $active 75%);
		background-image: -o-linear-gradient(top, transparent 75%, $active 75%);
		background-image: linear-gradient(to bottom, transparent 75%, $active 75%);
		background-size: 2px 2px;
		background-origin: padding-box;
		background-position: 0 95%;
		background-repeat: repeat-x;
    }		
	}
	
	
@mixin linx ($link, $visit, $hover, $active) {
  a {
    color: $link;
    &:visited {
      color: $visit;
    }
    &:hover {
      color: $hover;   
    }
    &:active {
      color: $active;
    }
  }
}
	
		
	
/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);  
  }
}


/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}



/// Base path for assets (fonts, images...),
/// should not include trailing slash
/// @access public
/// @type String
$asset-base-path: '../assets' !default;

/// Asset URL builder
/// @access private
/// @param {String} $type - Asset type, matching folder name
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the asset
@function asset($type, $file) {
  @return url($asset-base-path + '/' + $type + '/' + $file);
}

/// Image asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the image
/// @require {function} asset
@function image($file) {
  @return asset('images', $file);
}

/// Font asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the font
/// @require {function} asset
@function font($file) {
  @return asset('fonts', $file);
}


/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix($color, white, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix($color, black, $percentage);
}


@mixin aspect-ratio($width, $height) {
    position: relative;
    &:before{
        display: block;
        content: " ";
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }

    > .content {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
}



@mixin aspect-ratio($width, $height) {
    position: relative;
    &:before{
        display: block;
        content: " ";
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }

    > .content {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
}
	